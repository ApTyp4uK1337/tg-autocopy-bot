import os
import json
import asyncio
import logging
from pathlib import Path
from telethon import TelegramClient, events
from telethon.sessions import StringSession
from telethon.errors import SessionPasswordNeededError, PhoneCodeInvalidError
from dotenv import load_dotenv

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

class TelegramCopyBot:
    def __init__(self, session_name: str):
        self.session_name = session_name
        self.session_path = Path(f"sessions/{session_name}")
        self.session_file = self.session_path / f"{session_name}.session"
        self.config_file = self.session_path / "config.json"
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è —Å–µ—Å—Å–∏–∏ –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        self.session_path.mkdir(parents=True, exist_ok=True)
        
        # –ü–æ–ª—É—á–∞–µ–º API –¥–∞–Ω–Ω—ã–µ –∏–∑ .env
        self.api_id = os.getenv('API_ID')
        self.api_hash = os.getenv('API_HASH')
        
        if not self.api_id or not self.api_hash:
            raise ValueError("API_ID –∏ API_HASH –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –≤ .env —Ñ–∞–π–ª–µ")
        
        self.client = None
        self.config = {}
        self.is_copying = False
        
    async def load_config(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ —Ñ–∞–π–ª–∞"""
        if self.config_file.exists():
            with open(self.config_file, 'r', encoding='utf-8') as f:
                self.config = json.load(f)
        else:
            # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            self.config = {
                "source_channel": "",
                "target_channel": "",
                "delay_seconds": 60
            }
            await self.save_config()
    
    async def save_config(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤ —Ñ–∞–π–ª"""
        with open(self.config_file, 'w', encoding='utf-8') as f:
            json.dump(self.config, f, indent=2, ensure_ascii=False)
    
    async def setup_config(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ"""
        print("\n=== –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞ ===")
        
        source = input("–í–≤–µ–¥–∏—Ç–µ ID/username –∫–∞–Ω–∞–ª–∞-–∏—Å—Ç–æ—á–Ω–∏–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: @channel_name –∏–ª–∏ -1001234567890): ").strip()
        target = input("–í–≤–µ–¥–∏—Ç–µ ID/username —Ü–µ–ª–µ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: @channel_name –∏–ª–∏ -1001234567890): ").strip()
        
        while True:
            try:
                delay = int(input("–í–≤–µ–¥–∏—Ç–µ –∑–∞–¥–µ—Ä–∂–∫—É –≤ —Å–µ–∫—É–Ω–¥–∞—Ö –º–µ–∂–¥—É –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ–º –ø–æ—Å—Ç–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 60): ") or "60")
                break
            except ValueError:
                print("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ")
        
        self.config = {
            "source_channel": source,
            "target_channel": target,
            "delay_seconds": delay
        }
        
        await self.save_config()
        print("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!")
    
    async def authorize(self):
        """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å–µ—Å—Å–∏–µ–π
            self.client = TelegramClient(str(self.session_file), self.api_id, self.api_hash)
            await self.client.start()
            
            if await self.client.is_user_authorized():
                me = await self.client.get_me()
                logger.info(f"–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∫–∞–∫: {me.first_name} (@{me.username})")
                return True
            else:
                await self.client.disconnect()
        except:
            pass
        
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–≤—É—é –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
        print(f"\n=== –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –¥–ª—è —Å–µ—Å—Å–∏–∏: {self.session_name} ===")
        
        self.client = TelegramClient(str(self.session_file), self.api_id, self.api_hash)
        await self.client.start()
        
        phone = input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (—Å –∫–æ–¥–æ–º —Å—Ç—Ä–∞–Ω—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä +7): ").strip()
        
        try:
            await self.client.send_code_request(phone)
            code = input("–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∏–∑ Telegram: ").strip()
            
            try:
                await self.client.sign_in(phone, code)
            except SessionPasswordNeededError:
                password = input("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: ").strip()
                await self.client.sign_in(password=password)
            
            me = await self.client.get_me()
            logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∫–∞–∫: {me.first_name} (@{me.username})")
            return True
            
        except PhoneCodeInvalidError:
            logger.error("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è")
            return False
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
            return False
    
    async def get_entity_info(self, entity_id):
        """–ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ/—á–∞—Ç–µ"""
        try:
            entity = await self.client.get_entity(entity_id)
            return entity
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ {entity_id}: {e}")
            return None
    
    async def copy_message(self, message):
        """–ö–æ–ø–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ü–µ–ª–µ–≤–æ–π –∫–∞–Ω–∞–ª"""
        try:
            target_entity = await self.get_entity_info(self.config['target_channel'])
            if not target_entity:
                logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–ª–µ–≤–æ–π –∫–∞–Ω–∞–ª")
                return
            
            # –ö–æ–ø–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            if message.media:
                # –ï—Å–ª–∏ –µ—Å—Ç—å –º–µ–¥–∏–∞, –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º —Å –º–µ–¥–∏–∞
                await self.client.send_message(
                    target_entity,
                    message.message,
                    file=message.media,
                    parse_mode='html'
                )
            else:
                # –ï—Å–ª–∏ —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
                await self.client.send_message(
                    target_entity,
                    message.message,
                    parse_mode='html'
                )
            
            logger.info(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ –≤ {self.config['target_channel']}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    
    async def start_copying(self):
        """–ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–æ–≤"""
        if self.is_copying:
            logger.info("–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–æ")
            return
        
        source_entity = await self.get_entity_info(self.config['source_channel'])
        if not source_entity:
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–∞–Ω–∞–ª-–∏—Å—Ç–æ—á–Ω–∏–∫")
            return
        
        target_entity = await self.get_entity_info(self.config['target_channel'])
        if not target_entity:
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–ª–µ–≤–æ–π –∫–∞–Ω–∞–ª")
            return
        
        logger.info(f"üöÄ –ù–∞—á–∏–Ω–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–∞–Ω–∞–ª–∞: {source_entity.title}")
        logger.info(f"üì§ –ö–æ–ø–∏—Ä—É–µ–º –≤ –∫–∞–Ω–∞–ª: {target_entity.title}")
        logger.info(f"‚è±Ô∏è –ó–∞–¥–µ—Ä–∂–∫–∞: {self.config['delay_seconds']} —Å–µ–∫—É–Ω–¥")
        
        self.is_copying = True
        
        @self.client.on(events.NewMessage(chats=source_entity))
        async def handler(event):
            if not self.is_copying:
                return
                
            logger.info(f"üì© –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª–µ-–∏—Å—Ç–æ—á–Ω–∏–∫–µ")
            
            # –ñ–¥–µ–º –∑–∞–¥–∞–Ω–Ω—É—é –∑–∞–¥–µ—Ä–∂–∫—É
            if self.config['delay_seconds'] > 0:
                logger.info(f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ {self.config['delay_seconds']} —Å–µ–∫—É–Ω–¥...")
                await asyncio.sleep(self.config['delay_seconds'])
            
            # –ö–æ–ø–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            await self.copy_message(event.message)
        
        logger.info("‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω! –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
        
        try:
            await self.client.run_until_disconnected()
        except KeyboardInterrupt:
            logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...")
            self.is_copying = False
    
    async def run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            await self.load_config()
            
            # –ê–≤—Ç–æ—Ä–∏–∑—É–µ–º—Å—è
            if not await self.authorize():
                return
            
            # –ï—Å–ª–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—É—Å—Ç–∞—è, –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º
            if not self.config.get('source_channel') or not self.config.get('target_channel'):
                await self.setup_config()
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            print(f"\n=== –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ===")
            print(f"–ö–∞–Ω–∞–ª-–∏—Å—Ç–æ—á–Ω–∏–∫: {self.config['source_channel']}")
            print(f"–¶–µ–ª–µ–≤–æ–π –∫–∞–Ω–∞–ª: {self.config['target_channel']}")
            print(f"–ó–∞–¥–µ—Ä–∂–∫–∞: {self.config['delay_seconds']} —Å–µ–∫—É–Ω–¥")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ
            await self.start_copying()
            
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        finally:
            if self.client:
                await self.client.disconnect()

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("ü§ñ tg-autocopy-bot")
    print("üíé author: @aptyp4uk1337")
    print("=" * 40)
    
    session_name = input("–í–≤–µ–¥–∏—Ç–µ –∏–º—è —Å–µ—Å—Å–∏–∏: ").strip()
    if not session_name:
        print("‚ùå –ò–º—è —Å–µ—Å—Å–∏–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
        return
    
    bot = TelegramCopyBot(session_name)
    await bot.run()

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\nüí§ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")